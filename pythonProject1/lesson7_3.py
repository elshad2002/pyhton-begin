# 3) Реализовать программу работы с органическими клетками, состоящими из ячеек. Необходимо
# создать класс Клетка. В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы
# © geekbrains.ru 20
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()),
# умножение (__mul__()), деление (__truediv__()). Данные методы должны применяться только
# к клеткам и выполнять увеличение, уменьшение, умножение и целочисленное (с округлением
# до целого) деление клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться
# сумме ячеек исходных двух клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и
# количество ячеек в ряду. Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n
# равно переданному аргументу. Если ячеек на формирование ряда не хватает, то в последний
# ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод
# make_order() вернет строку: *****\n*****\n***
class Cell:
    def __init__(self, cell_of_cell):
        self.cell_of_cell = cell_of_cell


    def __add__(self, other):
        return Cell(self.cell_of_cell + other.cell_of_cell)

    def __sub__(self, other):
        return Cell(self.cell_of_cell - other.cell_of_cell) if self.cell_of_cell - other.cell_of_cell > 0 else print(
            "error")

    def __mul__(self, other):
        return Cell(self.cell_of_cell * other.cell_of_cell)

    def __truediv__(self, other):
        return Cell(self.cell_of_cell // other.cell_of_cell)

    def __str__(self):
        return f"{self.cell_of_cell}"

    def make_order(self, cell_in_order):
        result = ""
        orders = self.cell_of_cell / cell_in_order
        if int(orders) < orders:
            orders += 1
        orders = int(orders)
        for i in range(orders):
            if i == orders - 1 and self.cell_of_cell % cell_in_order != 0:
                result = result + f"{self.cell_of_cell % cell_in_order * "*"}\n"
            else:
                result = result + f"{cell_in_order * "*"}\n"
        return result


c_1 = Cell(100)
c_2 = Cell(25)
print(c_1.make_order(4))
print(c_1 + c_2)
print(c_1 - c_2)
print(c_1 * c_2)
print(c_1 / c_2)
